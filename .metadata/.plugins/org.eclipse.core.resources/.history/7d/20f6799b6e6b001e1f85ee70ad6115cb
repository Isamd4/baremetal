//#include "stm32f446xx.h"
//the button is connected to pc13
//port C
//pin 13
#include <stdio.h>
//port c is connected to AHB1

#define PERIPH_BASE (0x40000000U)

#define AHB1_OFFSET (0x00020000U)
#define AHB1_BASE (PERIPH_BASE + AHB1_OFFSET)

#define GPIOC_OFFSET (0x00000800U)
#define GPIOC_BASE (AHB1_BASE + GPIOC_OFFSET)

//GPIO PORT B
#define GPIOB_OFFSET (0x00000400)
#define GPIOB_BASE (AHB1_BASE + GPIOB_OFFSET)
//set the mode of the portb
#define GPIO_MODE_OFFSET (0x00)
#define GPIO_MODE_R (*(volatile unsigned int*)(GPIOB_BASE + GPIO_MODE_OFFSET))
//to set as output pin 7 then we need to set the mode of bit pos 14 and 15 to be 0 and 1 consec
#define GPIO_MODE_SET14 (1<<14)

//The way to turn on the bus
#define RCC_OFFSET (0x00003800U)
#define RCC_BASE (AHB1_BASE + RCC_OFFSET)

//now I need to go and enable the RCC AHB1
#define RCC_AHB1ENR_OFFSET (0x30U)
#define RCC_AHB1ENR_BASE (*(volatile unsigned int*)(RCC_BASE + RCC_AHB1ENR_OFFSET))
#define RCC_AHB1ENR_GPIOC_EN (1<<2)
#define RCC_SET_GPIOB (1<<1)
//the mode of the PC13
#define GPIOC_MODER_OFFSET (0x00U)
#define GPIOC_MODER_BASE (*(volatile unsigned int*)(GPIOC_BASE + GPIOC_MODER_OFFSET))
//now set it as input of pin 13
// we need to have 00 for bit 26 and 27
#define reset_bit26 (1<<26)
#define reset_bit27 (1<<27)

//input regiseter
#define GPIOC_IDR_OFFSET (0x10)
#define GPIOC_IDR_BASE (*(volatile unsigned int*)(GPIOC_BASE + GPIOC_IDR_OFFSET))

//set the mode of the portb
#define GPIO_MODE_OFFSET (0x00)
#define GPIO_MODE_R (*(volatile unsigned int*)(GPIOB_BASE + GPIO_MODE_OFFSET))
//to set as output pin 7 then we need to set the mode of bit pos 14 and 15 to be 0 and 1 consec
#define GPIO_MODE_SET14 (1<<14)

//output data
#define GPIO_OUTPUTDATA_OFFSET (0x14)
#define GPIO_OUTPUTDATA_R (*(volatile unsigned int*)(GPIOB_BASE + GPIO_OUTPUTDATA_OFFSET))
#define SET_PIN7 (1<<7)


#define GETBIT(var, bit)	(((var) >> (bit)) & 1)
int main(void){

	//enable rcc
	RCC_AHB1ENR_BASE |= RCC_AHB1ENR_GPIOC_EN;
	RCC_AHB1EN_R |= RCC_SET_GPIOB;
	GPIO_MODE_R |= GPIO_MODE_SET14;
	GPIO_MODE_R &= ~(1<<15);

	//mode of the GPIOC
	GPIOC_MODER_BASE |= ~reset_bit26;
	GPIOC_MODER_BASE |= ~reset_bit27;

	while(1){
		int bit13 = GETBIT(GPIOC_IDR_BASE, 13);
		if(bit13 == 1){
			printf("bit 13 is %d", bit13);
		}
	}

}

























//#define GPIOBEN (1U << 1)
//#define PIN7	(1U << 7)
//#define SET7 PIN7
//#define RESET7 (1U << 23)
//int main (void){
//
//	RCC->AHB1ENR |= GPIOBEN;
//
//	GPIOB->MODER |= (1U<<14);
//	GPIOB->MODER &= ~(1U<<15);
//	while(1){
//		GPIOB->BSRR = SET7;
//		for(int i=0;i<1000000;i++){}
//		GPIOB->BSRR = RESET7;
//		for(int i=0;i<100000;i++){}
//	}
//}
