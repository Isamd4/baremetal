#include <stdint.h>
//blink user LED2 connected to PB7

//first is to get the peripheral address
#define PERIPH_BASE (0x40000000)

//need to get the bus connected to port B -- connected to AHB1 bus
#define AHB1_OFFSET (0x00020000)
#define AHB1_BASE (PERIPH_BASE + AHB1_OFFSET)

//GPIOB
#define GPIOB_OFFSET (0x00000400)
#define GPIOB_BASE (AHB1_BASE + GPIOB_OFFSET)

//get the address for activiating the bus - RCC
#define RCC_OFFSET (0x3800)
#define RCC_BASE (AHB1_BASE + RCC_OFFSET)

//enabling the offset
#define AHB1_RCC_EN_OFFSET (0x30)
#define AHB1_RCC_EN_R (*(volatile unsigned int *)(RCC_BASE + AHB1_RCC_EN_OFFSET))
//for port B, is bit 1
#define RCC_PORTB_EN (1<<1);

//gpio mode setup
#define GPIOB_MODE_OFFSET (0x00)
#define GPIOB_MODE_R (*(volatile unsigned int *)(GPIOB_BASE + GPIOB_MODE_OFFSET))
#define GPIOB_7_OUT (1<<14)


//gpiob data
#define GPIOB_OUTDATA_R_OFFSET (0x14)
#define GPIOB_OUTDATA_R (*(volatile unsigned int *)(GPIOB_BASE + GPIOB_OUTDATA_R_OFFSET))

#define GPIOB_7_HIGH (1 << 7)

typedef struct{
	volatile uint32_t GPIO_MODER;
	volatile uint32_t GPIO_OTYPER;
	volatile uint32_t GPIO_OSPEEDR;
	volatile uint32_t GPIO_PUPDR;
	volatile uint32_t GPIO_IDR;
	volatile uint32_t GPIO_ODR;
	volatile uint32_t GPIO_BSRR;
	volatile uint32_t GPIO_LCKR;
	volatile uint32_t GPIO_AFRL;
	volatile uint32_t GPIO_AFRH;

}GPIO_STRUCT;

typedef struct{
	volatile uint32_t OTHERS[12];
	volatile uint32_t AHB1ENR;
}RCC_STRUCT;

#define GPIO ((GPIO_STRUCT*) GPIOB_BASE);
#define RCC ((RCC_STRUCT*) RCC_BASE);
int main (void ){
	//enable the clocking
	RCC->AHB1ENR |= RCC_PORTB_EN;

	//mode to be output
	GPIO->GPIO_MODER |= GPIOB_7_OUT;

	GPIO->GPIO_MODER  &= ~(1<<15);
	while (1){
		GPIO->GPIO_ODR  ^= GPIOB_7_HIGH;
		for(int i=0;i<1000000;i++){}
	}

}
